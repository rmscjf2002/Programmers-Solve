#include <string>
#include <algorithm>
#include <set>
#include <vector>


/* set과 next_permutation을 문제에 적용시켜야함 */

using namespace std;

int solution(string numbers) {
    int max = 0;
	int not_prime[100000000] = { 1,1,0 };

	sort(numbers.begin(), numbers.end(), greater<>());
	max = stoi(numbers); // 최대값을 구하기 위해 내림차순 정렬하고 stoi로 int값 반환

	

	/* 에라토스테네의 체로 소수판별하기 */
	for (int i = 2; i <= max; i++)
	{
		for (int j = 2 * i; j <= max; j+=i)
		{
			
			if (not_prime[j] == 0)
				not_prime[j] = 1;
		}
	}

	
	sort(numbers.begin(), numbers.end());

	
	/* 

		set : key값이 중복되지 않는다. 
		insert 입력시 오름차순으로 자동 정렬 됨.
	    (균형 이진트리 , <중위순회 하면 순서대로 출력>)

	 */
	set<int> result;


	/*
		서로 다른 n개의 원소에서 r개를 뽑아 한줄로 세우는 경우의 수 (순열)
		<순열을 구할 때 사용 -> next_permutation>

		ex) {1,2,3} 의 모든 순열
		{1,2,3},
		{1,3,2},
		{2,1,3},
		{2,3,1},
		{3,1,2},
		{3,2,1}
		총 6가지.
		사용하기 위해서는 오름차순으로 정렬된 값을 가진 컨테이너여야 된다.

	*/

	do {
		
		for (int i = 1; i <= numbers.size(); i++)
		{
			int tmp = stoi(numbers.substr(0, i));
			if (not_prime[tmp] == 0)
			{
				result.insert(tmp);
			}
		}
	} while (next_permutation(numbers.begin(), numbers.end()));
	 // 다음 순열이 없으면 false를 반환
	 // numbers "17"의 순열 -> 17,71
    
    return result.size();
}