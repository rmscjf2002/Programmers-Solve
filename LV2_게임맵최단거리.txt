#include<vector>
#include<queue>
using namespace std;

/* BFS */

int solution(vector<vector<int> > maps)
{
    int visit[101][101] = { 0 };
	// visit값을 꼭 초기화 시켜야함, 안하면 쓰레기값으로 초기화됨.

	int type[4][2] =
	{
		{ -1,0 },
		{ 1,0 },
		{ 0,-1 },
		{ 0,1 }
	};

	int answer = 0;
	queue<pair<int, int>> q;

	int rowsize = maps.size();
	int colsize = maps[0].size();
	
	q.push({ 0, 0 });
	visit[0][0] = 1;

	int x, y;

	while (!q.empty())
	{
		x = q.front().first;
		y = q.front().second;
		q.pop();

		
		if (x == rowsize - 1 && y == colsize - 1)
		{
			answer = visit[rowsize-1][colsize-1];
			break;
		}

		for (int i = 0; i < 4; i++)
		{
		
			int nx = x + type[i][0];
			int ny = y + type[i][1];
			
			if (nx >= 0 && nx < rowsize && ny >= 0 && ny < colsize && visit[nx][ny] == 0 && maps[nx][ny] == 1)
			{
			
				visit[nx][ny] = visit[x][y] + 1;
				q.push({ nx,ny });
			}
		}
	}

	if (answer == 0)
		return --answer;
	else
		return answer;
}