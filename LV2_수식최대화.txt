#include <string>
#include <algorithm>
#include <vector>

using namespace std;

long long solution(string expression) {
    
    long long ans = 0;
    vector<char> Operator = { '+','-','*' }; // 연산자 벡터
	vector<char> tmpoperator; // expression에서 뽑아서 저장 할 연산자 벡터
	vector<long long> num; // expression에서 뽑아서 저장 할 숫자 벡터

	int len = expression.length();
	int n = 0;
	for (int i = 0; i < len; i++)
	{
        // 연산자면 숫자를 num벡터에 저장하고, 연산자는 tmpoperator에 저장한다.
		if (expression[i] == '-' || expression[i] == '+' || expression[i] == '*')
		{
			num.push_back(n);
			n = 0;
			tmpoperator.push_back(expression[i]);
			
		}
		else
		{
			n *= 10;
			n += expression[i] - '0';
		}
	}
    // 다 끝나고 마지막 숫자를 num에 저장
	num.push_back(n);

	sort(Operator.begin(), Operator.end()); // next_permutation을 사용하려면 오름차순 정렬되어 있어야함.
	do
	{
		// erase를 쓰면서 진행하기 때문에 조합마다 수와연산자를 담을 tmp벡터선언
		vector<long long> tmpnum = num;
		vector<char> toperator = tmpoperator;
		// erase 사용이 중요함. 
		for (int i = 0; i < 3; i++)
		{
			for (unsigned int j = 0; j < toperator.size(); j++)
			{
				
				if (Operator[i] == toperator[j])
				{
					
					if (Operator[i] == '*')
					{
						tmpnum[j] = (tmpnum[j] * tmpnum[j + 1]);
						tmpnum.erase(tmpnum.begin()+j+1); 
						toperator.erase(toperator.begin() + j);
						j = -1;
					}
					else if (Operator[i] == '+')
					{
						tmpnum[j] =  (tmpnum[j] + tmpnum[j + 1]);
						tmpnum.erase(tmpnum.begin() + j + 1);
						toperator.erase(toperator.begin() + j);
						j = -1;
					}
					else if (Operator[i] == '-')
					{
						tmpnum[j] = (tmpnum[j] - tmpnum[j + 1]);
						tmpnum.erase(tmpnum.begin() + j + 1);
						toperator.erase(toperator.begin() + j);
						j = -1;
					}
					
				}
			}
		}
	
		ans = max(ans, abs(tmpnum[0])); 

	} while (next_permutation(Operator.begin(), Operator.end()));
    
    return ans;
}