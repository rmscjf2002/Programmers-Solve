#include <string>
#include <vector>
#include <cmath>
#include <numeric>
#include <queue>

using namespace std;

long long solution(int n, vector<int> works) {
    long long answer = 0;
    
    /* 시간초과
    long long sum = accumulate(works.begin(), works.end(), 0);
    if (sum <= n)
		return 0;
    
    while (n--)
	{
		sort(works.begin(), works.end());
		works[works.size() - 1]--;
	}
    

	for (auto i : works)
		answer += pow(i, 2);
    */
    
    long long sum = accumulate(works.begin(), works.end(), 0);
    if (sum <= n)
		return 0;
    
    
	priority_queue<int> pq;

	for (auto i : works)
		pq.push(i);

	for (int i = 0; i < n; i++)
	{
		if (pq.top() > 0)
		{
			int val = pq.top();
			pq.pop();
			pq.push(val - 1);
		}
	}

    

    while(!pq.empty())
    {
        answer += pow(pq.top(),2);
        pq.pop();
    }
    
    
    return answer;
}