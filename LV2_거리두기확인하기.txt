#include <string>
#include <vector>

using namespace std;


int type[12][2] =
{
	{1,0}, // 0
	{2,0}, // 1
	{-1,0}, // 2
	{-2,0}, // 3
	{0,1}, // 4
	{0,2}, // 5
	{0,-1}, // 6
	{0,-2}, // 7
	{1,1}, // 8
	{-1,1}, // 9
	{-1,-1}, // 10
	{1,-1} // 11
};


char board[26][26];

bool isCheck(int x, int y)
{
	bool isPartition = false;

	for (int i = 0; i < 12; i++)
	{
		isPartition = false;
		int nx = x + type[i][0];
		int ny = y + type[i][1];

		if (nx < 0 || nx >= 5 || ny < 0 || ny >= 5)
			continue;

		if (i == 1 && board[nx - 1][ny] == 'X')
			isPartition = true;
		if (i == 3 && board[nx + 1][ny] == 'X')
			isPartition = true;
		if (i == 5 && board[nx][ny - 1] == 'X')
			isPartition = true;
		if (i == 7 && board[nx][ny + 1] == 'X')
			isPartition = true;

		if (i == 8 && board[nx - 1][ny] == 'X' && board[nx][ny - 1] == 'X')
			isPartition = true;

		if (i == 9 && board[nx + 1][ny] == 'X' && board[nx][ny - 1] == 'X')
			isPartition = true;

		if (i == 10 && board[nx + 1][ny] == 'X' && board[nx][ny + 1] == 'X')
			isPartition = true;

		if (i == 11 && board[nx - 1][ny] == 'X' && board[nx][ny + 1] == 'X')
			isPartition = true;

		if ((board[nx][ny] == 'P' && !isPartition))
		{
			return false;
		}
	}
	return true;
}


vector<int> solution(vector<vector<string>> places) {
    vector<int> answer;
    bool ischeck = true;

	for (int i = 0; i < places.size(); i++)
	{
		ischeck = true;
		for (int j = 0; j < places[i].size(); j++)
			for (int k = 0; k < places[i][j].size(); k++)
				board[j][k] = places[i][j][k];

		for (int j = 0; j < 5; j++)
		{
			for (int k = 0; k < 5; k++)
			{
				if (board[j][k] == 'P')
				{
					ischeck = isCheck(j, k);
					if (!ischeck)
					{
						answer.push_back(0);
						break;
					}
				}
			}
			if (!ischeck)
				break;
		}

		if (ischeck)
			answer.push_back(1);	
		
	}

    return answer;
}