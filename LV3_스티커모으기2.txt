#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

/*int ans;

void DFS(vector<int> v, int sum)
{
	ans = max(ans, sum);

	for (int i = 0; i < v.size(); i++)
	{
		if (v[i] == -1)
			continue;
		int before, after, tmpb, tmpa;
		int tmpcur = v[i];

		if (i - 1 < 0)
		{
			tmpb = v[v.size() - 1];
			before = v.size() - 1;
		}
		else
		{
			tmpb = v[i - 1];
			before = i - 1;
		}
		if (i + 1 >= v.size())
		{
			tmpa = v[0];
			after = 0;
		}
		else
		{
			tmpa = v[i + 1];
			after = i + 1;
		}

		v[before] = v[after] = v[i] =  -1;
		DFS(v, sum + tmpcur);
		v[before] = tmpb;
		v[after] = tmpa;
		v[i] = tmpcur;
	}
	return;
}
*/ // 시간초과

int solution(vector<int> sticker)
{

    int answer = 0;
    
    if(sticker.size() == 1)
        return sticker[0];

	int dp[100001] = { 0 };

	dp[0] = sticker[0];
	dp[1] = dp[0];

	for (int i = 2; i < sticker.size() - 1; i++)
		dp[i] = max(dp[i - 2] + sticker[i], dp[i - 1]);
	dp[sticker.size() - 1] = dp[sticker.size()- 2];
	answer = max(answer, *max_element(dp, dp + sticker.size()));

	fill(dp, dp + sticker.size(), 0);


	if (sticker.size() >= 2)
	{
		dp[1] = sticker[1];
		for (int i = 2; i < sticker.size(); i++)
			dp[i] = max(dp[i - 2] + sticker[i], dp[i - 1]);

		answer = max(answer, *max_element(dp, dp + sticker.size()));

	}

    return answer;
}