/*
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

string func(long long x)
{
	string tmp;
	while (1)
	{
		tmp += to_string(x % 2);
		x /= 2;
		if (x == 0)
		{
			break;
		}
	}
	return tmp;
}
vector<long long> solution(vector<long long> numbers) {
    vector<long long> answer;
    int size = numbers.size();

	for (int i = 0; i < size; i++)
	{
		string a = func(numbers[i]);
		
		bool areverse = false;
		bool check = false;
		long long ans = 0;
		long long idx = 1;
		int cnt = 0; // 다른 비트의 개수
		while (1)
		{
			cnt = 0;
			string tmp = func(numbers[i] + idx);

			while (tmp.size() > a.size())
			{
				a += to_string(0);
			}

			if (areverse == false)
			{
				reverse(a.begin(), a.end());
				areverse = true;
			}
			reverse(tmp.begin(), tmp.end());


			for (unsigned int j = 0; j < tmp.length(); j++)
			{
				if (tmp[j] != a[j])		
					cnt++;
	
				if (cnt >= 3)
					break;
			}
			if (cnt >= 1 && cnt <= 2)
				check = true;

			if (check == true)
			{
				ans = numbers[i] + idx;
				break;
			}
			idx++;
		}
		answer.push_back(ans);
	}

    return answer;
}
*/
// 위의 코드로 작성했을 시 10,11 시간초과로 실패가 나온다 

// 최대 크기가 터무니없이 크면 직관적인 접근보다, 패턴을 파악해보자

#include <string>
#include <vector>

using namespace std;

vector<long long> solution(vector<long long> numbers) {

    int size = numbers.size();
	vector<long long> answer;

	for (int i = 0; i < size; i++)
	{
		if (numbers[i] % 2 == 0) // 짝수라면 맨 끝의 비트가 0 이므로 +1 하면 무조건 정답으로 이어진다.
			answer.push_back(numbers[i] + 1);

		// 홀수일 경우 1,2,4,8 ~ 이렇게 2의 배수로 and 연산을 하면서 같은 비트가 없으면 
        // numbers[i]에 bit/2의 값을 더하면 답으로 이어진다.
		// 나는 도저히 이런 패턴을 찾지 못하겠어서 다른사람의 풀이를 참조하였는데, 대단한거 같다.
		else 

		{
			long long bit = 1;
			while (1)
			{
				if ((numbers[i] & bit) == 0)
					break;
				bit *= 2;
			}
			bit = bit / 2;
			answer.push_back(numbers[i] + bit);
		}
	}

    return answer;
}