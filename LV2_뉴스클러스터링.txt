#include <string>
#include <vector>
#include <algorithm>


using namespace std;

int solution(string str1, string str2) {
    int answer = 0;
	string s1;
	string s2;

	int len1 = str1.length();
	int len2 = str2.length();

	for (int i = 0; i < len1; i++)
		s1 += toupper(str1[i]);

	for (int i = 0; i < len2; i++)
		s2 += toupper(str2[i]);

	
	vector<string> v1;
	vector<string> v2;

	int idx = 0;
	
	while (idx != s1.length() - 1)
	{
		string tmp = s1.substr(idx, 2);
		bool check = false; // 영문자가 아닐 경우 다중집합의 원소가 될 수 없으므로 check변수로 확인
		for (unsigned int i = 0; i < tmp.length(); i++)
		{
			// 영문자가아니면 check를 true로 하고 브레이크
			if (tmp[i] >= 'A' && tmp[i] <= 'Z')
				continue;
			else
			{
				check = true;
				break;
			}
		}
		if(!check)
			v1.push_back(s1.substr(idx, 2));
		idx++;
	}

	idx = 0;

	while (idx != s2.length() - 1)
	{
		string tmp = s2.substr(idx, 2);
		bool check = false;
		for (unsigned int i = 0; i < tmp.length(); i++)
		{
			// 영문자가아니면 check를 true로 하고 브레이크
			if (tmp[i] >= 'A' && tmp[i] <= 'Z')
				continue;
			else
			{
				check = true;
				break;
			}
		}
		if (!check)
			v2.push_back(s2.substr(idx, 2));
		idx++;
	}
	if (v1.empty() && v2.empty()) // 공집합이면 1이므로 65536
	{
		answer = 65536;
	}
	else
	{

		double intersize = 0; // 교집합 개수
		double maxsize = v1.size() + v2.size(); // 전체 원소의 개수 
		

		/* 교집합 개수 구하기 */

		if (v1.size() > v2.size())
		{
			for (unsigned int i = 0; i < v2.size(); i++)
			{
				auto t = find(v1.begin(), v1.end(), v2[i]);
				if (t != v1.end()) // s2[i]의 값이 s1에 있으면
				{
					intersize++;
					v1.erase(t);
				}
			}
		}
		else
		{
			for (unsigned int i = 0; i < v1.size(); i++)
			{
				auto t = find(v2.begin(), v2.end(), v1[i]);
				if (t != v2.end()) // s1[i]의 값이 s2에 있으면
				{
					intersize++;
					v2.erase(t);
				}
			}
		}

		// 합집합의 수는 전체 사이즈 - 교집합 사이즈 
		double size2 = maxsize - intersize;
		

		answer = intersize / size2 * 65536;

	}
    return answer;
}