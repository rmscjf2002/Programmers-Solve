#include <string>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

// 여러 블로그를 참조하며 겨우 이해했다.

vector<string> solution(vector<string> orders, vector<int> course) {
    
	vector<string> answer;

	map<int, int> menu; // 메뉴개수 key값, 메뉴 수 value값
	map<int, vector<string>> ans; // 메뉴개수 key값, 메뉴 이름 value값

    for(unsigned int i=0; i<orders.size(); i++)
        sort(orders[i].begin(),orders[i].end()); // includes하려면 sort해야함

	for (unsigned int i = 0; i < course.size(); i++)
	{
		menu[course[i]] = 1;
		vector<string> tmp;
		ans[course[i]] = tmp;
	}

	
	
	while (orders.size())
	{
		string s = orders[0];
		orders.erase(orders.begin());

		int len = s.length(); // s의 길이
		vector<int> tmp(len, 0);

		for (unsigned int i = 0; i < course.size(); i++)
		{
			int csize = course[i]; // 어느 크기의 메뉴 인지
			if (len < csize) // 구하고자하는 크기가 길이보다 크면 안되니까 continue
				continue;

			for (int j = len - 1; j >= len - csize; j--) // 뒤부터 1을 채우는 이유 -> next permutation 사용을 위해서는 오름차순 정렬이 되어 있어야 한다.
			{
				tmp[j] = 1;
			}

			do
			{
				string ts = "";
				for (unsigned int j = 0; j < tmp.size(); j++)
				{
					if (tmp[j] == 1)
						ts += s[j];
				}

				int cnt = 1;

				for (unsigned int j = 0; j < orders.size(); j++)
				{
					if (includes(orders[j].begin(), orders[j].end(), ts.begin(), ts.end())) // ts의 요소가 orders[j]에 모두 포함되면 true 아니면 false 반환
						cnt++;
				}
				if (cnt == 1) // 겹치는게 없으면 continue
					continue;

				if (menu[csize] < cnt)
				{
					ans[csize].clear();
					menu[csize] = cnt;
					ans[csize].push_back(ts);
				}
				else if (menu[csize] == cnt)
					ans[csize].push_back(ts);
			} while (next_permutation(tmp.begin(), tmp.end()));
		}
	}

		
	

	for (unsigned int i = 0; i < ans.size(); i++)
	{
		for (unsigned int j = 0; j < ans[i].size(); j++)
			answer.push_back(ans[i][j]);
	}

	sort(answer.begin(), answer.end());
    return answer;
}