#include <string>
#include <vector>
#include <stack>
#include <iostream>

using namespace std;


/* 다른사람의 풀이보면 map으로도 풀 수 있다 */

bool check(vector<string> _check, string s) // 이전에 썼던 단어가 또나오면 false반환 
{
	for (unsigned int i = 0; i < _check.size(); i++)
	{
		if (_check[i] == s)
			return false;
	}
	return true;
}

vector<int> solution(int n, vector<string> words) {
    
    stack<string> s; // 이전 단어의 끝글자와 현재 단어의 첫글자가 같은지 비교하기 위해 스택사용
	vector<int> person(n, 0); // n명의 사람만큼 배열 할당
	vector<string> checkv; // check함수를 쓰기 위한 벡터
	int idx = 0; // person의 인덱스
	for (unsigned int i = 0; i < words.size(); i++)
	{
		if (idx > n - 1) // n명을 넘으면 다시 idx = 0으로
			idx = 0;
		
		person[idx]++; // 차례를 증가
		

		if (s.empty()) // stack이 비어있으면 무조건 push
		{
			s.push(words[i]);
			checkv.push_back(words[i]);
			idx++;
		}
		else
		{
			if (s.top().at(s.top().size() - 1) == words[i][0]) // 이전단어 끝글자와 현재단어 첫글자 비교
			{
				if (check(checkv, words[i])) // 제대로 끝말잇기가 됐고, 이전에 쓴 단어도 사용안했으면 push
				{
					s.push(words[i]);
					checkv.push_back(words[i]);
					idx++;
				}
				else // check에서 false를 반환하면 이전에 쓴 단어를 사용한것이므로 break
				{
					break;
				}
			}
			else // 이전단어 끝글자와 현재단어 첫글자가 일치하지않으면 break
			{
				break;
			}
		}
		

	}

	vector<int> answer;
	
	if (idx + 1 > n) // 제대로 끝말잇기가 완료되면 idx+1이 n보다 크게 되므로 0,0을 반환
	{
		answer.push_back(0);
		answer.push_back(0);
	}
	else // 제대로 끝말잇기가 안된 경우 번호와차례 반환
	{
		answer.push_back(idx + 1);
		answer.push_back(person[idx]);
	}

    return answer;
}