#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> answer(501);

/* 원소구하는 함수 */
void func(int n,int len,string &s)
{
	for (int i = 0; i < len; i++)
	{
		if (s[i] == '{')
		{
			vector<int> tmp;
			int idx = i + 1;
			int cnt = 1;
			int num = 0;
			while (1)
			{
				if (s[idx] >= '0' && s[idx] <= '9')
				{
					num *= 10;
					num += s[idx] - '0';
				}
				idx++;
				if (s[idx] == ',')
				{
					tmp.push_back(num);
					num = 0;
					cnt++;
					if (cnt > n)
						continue;
				}
				if (s[idx] == '}')
				{
					tmp.push_back(num);
					break;
				}
			}
			if (cnt == n)
			{
				for (int i = 0; i < n; i++)
				{
					if (find(answer.begin(), answer.end(), tmp[i]) == answer.end())
					{
						answer[cnt - 1] = tmp[i];
					}
				}
			}
		}
	}

}

vector<int> solution(string s) {
	int len = s.length();
	int Max = -1;

	/* 첫번째 원소와 최대 개수 구하기 */
	for (int i = 0; i < len; i++)
	{
		if (s[i] == '{')
		{
			int idx = i+1;
			int cnt = 1;
			int num = 0;
			while (1)
			{
				if (s[idx] >= '0' && s[idx] <= '9')
				{
					num *= 10;
					num += s[idx] - '0';
				}
				idx++;
			    if (s[idx] == ',')
				{
					num = 0;
					cnt++;
				}
				if (s[idx] == '}')
					break;
			}
			Max = max(cnt, Max);
			if (cnt == 1)
				answer[cnt - 1] = num;
		}
	}

    /* 첫번째 이후의 원소들 구하기 */
	for (int i = 2; i <= Max; i++)
		func(i, len, s);
	
	
	vector<int> ans;
	for (int i = 0; i < Max; i++)
		ans.push_back(answer[i]);
    return ans;
}