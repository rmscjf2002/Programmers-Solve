/*
#include <iostream>
#include <queue>
using namespace std;


bool visit[1000000001] = { 0 };

int BFS(int start, int end, int battery)
{
    
	queue<pair<int, int>> q;
	q.push({ start,battery });
	visit[start] = true;
	while (!q.empty())
	{
		start = q.front().first;
		battery = q.front().second;


		q.pop();

		if (start == end)
		{
			return battery;
		}


		if (visit[start * 2] == false)
		{
			q.push({ start * 2,battery });
		}

		if (visit[start + 1] == false)
		{
			battery++;
			q.push({ start + 1, battery });

		}
	}
	return -1;
}

int solution(int n)
{
    int ans = 0;
    if(n < 2)
        ans = n;
    else
        ans = BFS(0,n,0);
    
    return ans;
}
*/
/* BFS로 풀었는데 , N이 10억이하의 자연수라 효율성[시간초과] 문제 발생 */
/* 그냥 수학적인 접근으로 가능한 문제였음 */

#include <iostream>
using namespace std;

int solution(int n)
{
    int ans = 0;

	while (n != 0)
	{
		if (n % 2 == 0)
		{
			n /= 2;
		}

		else
		{
			n--;
			ans++;
		}
	}
    
    return ans;
}

